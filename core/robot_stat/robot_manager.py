# core/robot_stat/robot_manager.py
import time 
import os
import pygetwindow as gw
from pywinauto import Application
import pyautogui
import pyperclip
from core.services.robot_dependencies.selenium_driver import SeleniumDriver
from core.services.robot_dependencies.selenium_scripts import WINDOW_ACTIVITY_SCRIPT
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from core.services.utils.common_utils import (
    wait_for_window,
    close_eds_window,
    find_eds_file_and_password
)
from settings.logger import setup_logger
from core.base_robot import BaseRobot
from selenium.common.exceptions import NoSuchElementException


logger = setup_logger(__name__)


class RobotStat(BaseRobot):
    KNP_URL = 'https://cabinet.stat.gov.kz/'

    def navigation_proccess(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é"""
        try:
            self.driver.navigate_to_url(self.KNP_URL)
            
            self.driver.execute_script(WINDOW_ACTIVITY_SCRIPT)
            logger.info("[START OPEN URL] –û—Ç–∫—Ä—ã–ª —Å–∞–π—Ç: cabinet.stat.gov.kz")
            
            self.driver.click_element(By.XPATH, '//a[@id="idLogin" and @href="#" and text()="–í–æ–π—Ç–∏"]')

            self.driver.click_element(By.XPATH, '//div[@id="container-1076-innerCt"]//span[@id="button-1077-btnInnerEl" and text()="–°–æ–≥–ª–∞—Å–µ–Ω"]')

            self.driver.click_element(By.XPATH, '//input[@type="checkbox" and @name="lawAlertCheck" and @id="lawAlertCheck"]')

            self.driver.click_element(By.XPATH, '//input[@type="submit" and @id="loginButton" and @value="–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"]', wait_for_visibility=True)


        except Exception as Err:
            logger.error(f"[START CLASS ROBOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ start_navigation: {Err}")
            self.driver.quit()
            raise
    
    def authenticate_proccess(self, selected_path):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"""
        logger.debug(f'path_in_auth={selected_path}')

        try:
            # self.state = RobotState.AUTH_STARTED
            # logger.info(f"[AUTH STATE CHANGE] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ: {self.state.value}")

            # –ü–æ–ª—É—á–∞—é —Ñ–∞–π–ª –≠–¶–ü –∏ –ø–∞—Ä–æ–ª—å
            eds_file, password = find_eds_file_and_password(selected_path)

            if eds_file and password:
                authorize_face(eds_file, password, self.driver)
            else:
                logger.error("[AUTH ERROR] –§–∞–π–ª –≠–¶–ü –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        except Exception as e:
            logger.error(f"[AUTH ERROR] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

    def reports_proccess(self):
        self.driver.click_element(By.XPATH, '//span[@class="x-tab-inner x-tab-inner-center" and text()="–ú–æ–∏ –æ—Ç—á—ë—Ç—ã"]')



def _activate_window_and_input(window_title, input_text, action_description):
    window = wait_for_window(window_title)
    if window:
        logger.debug(f'[AUTH] –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫–Ω–∞: {window_title}')
        window.activate()
        pyperclip.copy(input_text)
        pyautogui.hotkey('ctrl', 'v')
        time.sleep(.3)
        pyautogui.press('enter')
        logger.debug(f'[AUTH SUCCESS] {action_description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.')
        return True
    else:
        logger.debug(f'[AUTH WINDOW NOT FOUND] –û–∫–Ω–æ "{window_title}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        return False
    
def key_list_window(window_title, action_description):
    #todo: –ú–∞—Ä–∫: –î–æ–±–∞–≤–∏–ª —Ç–∞–π–º–∞—É—Ç –≤ 2—Å –≤–º–µ—Å—Ç–æ 20—Å (–¥–µ—Ñ–æ–ª—Ç)
    #todo: –æ–±–µ—Ä–Ω—É–ª –≤ try-except
    #todo: –î–æ–±–∞–≤–∏–ª sleep –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ä–æ–±–æ—Ç –±—É–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä
    try:
        window = wait_for_window(window_title, timeout=2)
        if window:
            logger.debug(f"[AUTH] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–Ω–∞: {window_title}")
            app = Application().connect(title=window_title)
            window = app.window(title=window_title)
            pyautogui.press("tab")
            time.sleep(.3)
            pyautogui.press("space")
            logger.debug(f'[AUTH SUCCESS] {action_description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.')
            return True
        else:
            logger.debug(f'[AUTH WINDOW NOT FOUND] –û–∫–Ω–æ "{window_title}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
            return False
    except Exception as e:
        logger.error(f'[AUTH ERROR] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–∫–Ω–∞ "{window_title}": {e}')
        return False


# --
def check_certificate_error(driver: SeleniumDriver):
    """–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏—Å—Ç–µ–∫!'."""
    try:
        error_element = driver.wait_for_element(By.ID, "errorMsgSpan", timeout=5)
        if error_element:
            logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞!")
            return True
    except NoSuchElementException:
        pass 
    return False

def handle_certificate_error(driver: SeleniumDriver):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω."""
    logger.info("üîÑ –û—à–∏–±–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞! –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω...")
    driver.navigate_to_url('https://cabinet.stat.gov.kz/')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—á–µ–∑–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
    if check_certificate_error(driver):
        logger.error("–û—à–∏–±–∫–∞ –Ω–µ –∏—Å—á–µ–∑–ª–∞ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω! –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä.")
        # driver.quit()
    else:
        logger.info("–£—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω!")
# --



def authorize_face(file_to_path, file_password, driver):
    try:
        logger.debug(f'[AUTH FACE SUCCESS] path={file_to_path}, password={file_password[:2]}***')
        # Step 0: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–∫–Ω–∞ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π
        key_list_window("–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π", "–í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á")
        # Step 1: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≠–¶–ü
        if not _activate_window_and_input('–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª', file_to_path, '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞'):
            raise Exception("–û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # Step 2: –û–∂–∏–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        if not _activate_window_and_input('–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≠–¶–ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ CMS', file_password, '–í–≤–æ–¥ –ø–∞—Ä–æ–ª—è'):
            raise Exception("–û–∫–Ω–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # Step 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç–∏–µ enter)
        window = wait_for_window('–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≠–¶–ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ CMS')
        if window:
            logger.debug('[AUTH PASSWORD WINDOW ACTIVATION] –û–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω–æ. –ê–∫—Ç–∏–≤–∞—Ü–∏—è...')
            window.activate()
            time.sleep(.3)
            logger.debug('[AUTH SIGN ENTER] –ù–∞–∂–∞—Ç–∏–µ Enter –¥–ª—è –ø–æ–¥–ø–∏—Å–∏')
            pyautogui.press('enter')
            logger.debug('[AUTH SUCCESS] –ü–æ–¥–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.')

            handle_certificate_error(driver)

        else:
            logger.info('[AUTH PASSWORD WINDOW NOT FOUND] –û–∫–Ω–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è')

    
    except Exception as Err:
        logger.error(f'[AUTH FACE ERROR] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {Err}')
        raise